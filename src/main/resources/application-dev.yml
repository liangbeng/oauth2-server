spring:
  datasource:
    url: jdbc:mysql://10.0.30.60:3306/oauth-server?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: 123456

  redis:
    host: localhost
    password:
    database: 1
    port: 6379
    timeout: 3000

 #es搜索
  elasticsearch:
    rest:
      username: nanfengluojin
      uris: 127.0.0.1:9201

# rabbitmq
  rabbitmq:
    host: localhost
    port: 5672
    virtual-host: /oauth
    username: oauth
    password: oauth
    publisher-returns: true #开启 return 确认机制,确认消息发送到队列(Queue),是否确定回调
    publisher-confirm-type: correlated #开启 confirm 确认机制,确认消息发送到交换机(Exchange),是否确定回调
    listener:
      direct: # 路由模式
        acknowledge-mode: manual # 人为地获取到channel之后调用方法向server发送ack（或消费失败时的nack）信息
        prefetch: 100 # 指定一个消费者一次可以从Rabbit中获取多少条消息并缓存在client中,一旦达到改值，Rabbit将会停止投递新的message到该consumer中直到它发出ack
    # 实现实时通信
    mqtt:
      url: tcp://localhost:1883
      username: guest
      password: guest
      defaultTopic: defaultTopic

# 邮件相关
  mail:
    host: smtp.163.com
    username: 18608183821@163.com
    password: VBMVRLTJUFDTQTYI
    properties:
      mail:
        smtp:
          ssl:
            enable: true

# swagger-ui 是否开启
#springfox:
#  documentation:
#    swagger-ui:
#      enabled: true

# knife4j 接口文档
knife4j:
  enable: true # 是否开启增强配置
  production: false # 是否开启生产环境屏蔽

custom-config:
  tokenUrl: http://127.0.0.1:10000
  zipExe: E:\7-Zip\7z.exe
  fileSave: G:\oauth-server
  emailExchange: emailExchange
  routingKey: oauth
